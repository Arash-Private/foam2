p({"class":"foam.nanos.cron.Cron","schedule":{"class":"foam.nanos.cron.CronSchedule","minute":0,"hour":1,"dayOfMonth":-1,"month":-1,"dayOfWeek":-1,"second":0},"scheduledTime":"2019-09-10T05:00:00.000Z","id":"expired notification","description":"remove expired notifications","code":"import foam.nanos.cron.RemoveExpiredNotificationCronjob;\ncron = new RemoveExpiredNotificationCronjob();\ncron.execute(x);\nprint(\"s\");"})
p({"class":"foam.nanos.cron.Cron","schedule":{"class":"foam.nanos.cron.CronSchedule","minute":0,"hour":-1,"dayOfMonth":-1,"month":-1,"dayOfWeek":-1,"second":0},"scheduledTime":"2019-09-09T17:00:00.000Z","id":"Renew rule history cron","description":"Cron for renewing rule history - run every hour.","code":"import foam.nanos.ruler.cron.RenewRuleHistoryCron; \ncron = new RenewRuleHistoryCron();\ncron.execute(x);\nprint(\"done\");"})
p({"class":"foam.nanos.cron.Cron","schedule":{"class":"foam.nanos.cron.CronSchedule","minute":0,"hour":-1,"dayOfMonth":-1,"month":-1,"dayOfWeek":-1,"second":0},"scheduledTime":"2019-09-09T17:00:00.000Z","id":"PMHourlyReduce","description":"","code":"\nrm = x.get(\"pmHourlyReduceManager\");\nrm.doReduce();\nx.get(\"pm1MinuteDAO\").removeAll();\nx.get(\"logger\").info(new String[] {\"Hourly PM Reduce Complete\"});\n  "})
p({"class":"foam.nanos.cron.Cron","schedule":{"class":"foam.nanos.cron.CronSchedule","minute":-1,"hour":0,"dayOfMonth":-1,"month":-1,"dayOfWeek":-1,"second":0},"scheduledTime":"2019-09-10T04:00:00.000Z","id":"PMDailyReduce","description":"","code":"\nrm = x.get(\"pmDailyReduceManager\");\nrm.doReduce();\nx.get(\"pmHourlyDAO\").removeAll();\nx.get(\"logger\").info(new String[] {\"Daily PM Reduce Complete\"});\n  "})
p({"class":"foam.nanos.cron.Cron","schedule":{"class":"foam.nanos.cron.CronSchedule","minute":-1,"hour":-1,"dayOfMonth":-1,"month":-1,"dayOfWeek":-1,"second":0},"scheduledTime":"2019-09-09T16:56:00.000Z","id":"expireSessionsCron","description":"Expire sessions every minute based on ttl","code":"import foam.nanos.session.cron.ExpireSessionsCron;\ncron = new ExpireSessionsCron();\ncron.execute(x);\nprint(\"done\");"})
p({"class":"foam.nanos.cron.Cron","enabled":false,"schedule":{"class":"foam.nanos.cron.CronSchedule","minute":-1,"hour":-1,"dayOfMonth":-1,"month":-1,"dayOfWeek":-1,"second":30},"scheduledTime":"2019-09-09T16:56:30.000Z","id":"SMTP Email Service","description":"Re-send UNSENT emails in emailMessageDAO","code":"import foam.dao.DAO;\nimport foam.dao.ArraySink;\nimport foam.nanos.notification.email.EmailMessage;\nimport foam.nanos.notification.email.SMTPEmailService;\nimport foam.nanos.notification.email.Status;\nimport static foam.mlang.MLang.*;\n\nDAO emailMessageDAO = (DAO) x.get(\"emailMessageDAO\");\nemailMessages = ((ArraySink)\n  emailMessageDAO\n    .where(EQ(EmailMessage.STATUS, Status.UNSENT))\n    .select(new ArraySink()))\n    .getArray();\nemailService = x.get(\"email\");\n\n// SES limit - 10 tps\nsecond = 1000;\ntps = 10;\n\nendtime = System.currentTimeMillis() + second;\ncount = 0;\nfor ( EmailMessage emailMessage : emailMessages ) {\n  emailMessageDAO.put(emailService.sendEmail(x, emailMessage));\n  count++;\n  if ( count > tps ) {\n    remaining = endTime - System.currentTimeMillis;\n    if ( remaining > 0 ) {\n      Thread.sleep(remaining);\n    }\n    count = 0;\n    endTime = System.currentTimeMillis() + second;\n  }\n}"})
