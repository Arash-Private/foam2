p({"class":"foam.nanos.script.Script","id":"279885d4-28ad-4af8-b1d9-69e6105970e1","description":"test","server":true,"scheduled":false,"code":"return \"hello World\"","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"279885d4-28ad-4af8-b1d9-69e6105970e1","description":"test","lastRun":"2017-09-29T16:23:47.978Z","server":true,"scheduled":false,"code":"return \"hello World\"","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"createPermissions","description":"Create missing Permissions","server":false,"code":"x.groupDAO.select(function(g) {\nfor ( var i = 0 ; i < g.permissions.length ; i++ ) {\nx.permissionDAO.put(g.permissions[i]);\n}\nperm = g.id + '.*';\np = foam.nanos.auth.Permission.create({id: perm});\nx.permissionDAO.put(p);\n});\n\nx.serviceProviderDAO.select(function(s) {\nperm = 'spid.read.' + s.id;\np = foam.nanos.auth.Permission.create({id: perm});\nx.permissionDAO.put(p);\nperm = 'spid.update.' + s.id;\np = foam.nanos.auth.Permission.create({id: perm});\nx.permissionDAO.put(p);\nperm = 'spid.delete.' + s.id;\np = foam.nanos.auth.Permission.create({id: perm});\nx.permissionDAO.put(p);\n});\n\nx.menuDAO.select(function(m) {\nperm = 'menu.read.' + m.id;\np = foam.nanos.auth.Permission.create({id: perm});\nx.permissionDAO.put(p);\nperm = 'menu.read.' + m.id;\np = foam.nanos.auth.Permission.create({id: perm});\nx.permissionDAO.put(p);\n});\n\nx.nSpecDAO.select(function(s) {\nperm = 'service.run.' + s.id;\np = foam.nanos.auth.Permission.create({id: perm});\nx.permissionDAO.put(p);\nperm = 'service.read.' + s.id;\np = foam.nanos.auth.Permission.create({id: perm});\nx.permissionDAO.put(p);\n});\n\n"})
p({"class":"foam.nanos.script.Script","id":"showJDAODirectory","description":"Discover where JDAO files are being saved.","lastRun":"2018-01-10T17:09:54.779Z","server":true,"scheduled":false,"code":"import foam.dao.*;\n\nsetAccessibility(true);\n\nDAO dao = x.get(\"userDAO\");\n\nwhile ( ! ( dao instanceof JDAO ) ) dao = dao.getDelegate();\n\nprint(dao.file_);","output":"/Users/kgr/NANOPAY/users\n","notes":""})
p({"class":"foam.nanos.script.Script","id":"benchmarkHashing","description":"Concurrent Hashing Benchmark","code":"import foam.nanos.bench.*;\nimport net.nanopay.bench.*;\n\nx = x.put(\"pmLogger\", null);\nb = new HashingBenchmark();\nbuilder = new BenchmarkRunner.Builder(x).setThreadCount(2).setInvocationCount(10000).setBenchmark(b);\nrunner = builder.build();\nrunner.execute(x);"})
p({"class": "foam.nanos.script.TestRunnerScript", "id":"testRunnerScript"})
p({"class":"foam.nanos.script.Script","id":"CandlestickDemoServices","description":"Sets up the services necessary to run the candlestick demo script.","server":false,"status":1,"code":"var cls = 'foam.demos.analytics.StockSnapshot';\nvar timeProp = 'time';\nvar valueProp = 'price';\n\nvar configs = [\n  {\n      name: 'hourly',\n      periodLengthMs: 60 * 60 * 1000\n  },\n  {\n      name: 'daily',\n      periodLengthMs: 24 * 60 * 60 * 1000\n  },\n  {\n      name: 'weekly',\n      periodLengthMs: 7 * 24 * 60 * 60 * 1000\n  }\n];\n\nctrl.__subContext__.classloader.load(cls).then(function() {\n    cls = foam.lookup(cls);\n    return Promise.all(configs.map(function(c) {\n        // Create each of the Candlestick DAOs.\n        return x['nSpecDAO'].put(foam.nanos.boot.NSpec.create({\n            name: c.name + cls.model_.name + 'DAO',\n            serve: true,\n            serviceScript: `\n    return new foam.dao.MDAO(\n        foam.nanos.analytics.Candlestick.getOwnClassInfo());\n            `,\n            client: `{\"of\": \"foam.nanos.analytics.Candlestick\"}`\n        }));\n    }))\n}).then(function() {\n    // Create a decorator that wires up the CandlestickDAOs.\n    return x['nSpecDAO'].put(foam.nanos.boot.NSpec.create({\n        name: foam.String.daoize(cls.model_.name),\n        serve: true,\n        serviceScript: `\n${configs.map((c, i) => {\n    return `\ndao = new foam.dao.MDAO(${cls.id}.getOwnClassInfo());\n${c.name} = new foam.nanos.analytics.CandlestickDAODecorator.Builder(x)\n    .setCandlestickDAO((foam.dao.DAO) x.get(\"${c.name + cls.model_.name + 'DAO'}\"))\n    .setTimeProp(\"${timeProp}\")\n    .setValueProp(\"${valueProp}\")\n    .setPeriodLengthMs(${c.periodLengthMs})\n    .setDelegate(${i === 0 ? 'dao' : configs[i-1].name})\n    .build();\n    `\n}).join('\\n')}\nreturn ${configs[configs.length-1].name};\n        `,\n        client: `{\"of\": \"${cls.id}\"}`\n    }));\n}).then(function() {\n    print('Done! Restart server for changes to take effect');\n});","output":"Done! Restart server for changes to take effect\n"})

p({"class":"foam.nanos.script.Script","id":"CandlestickDemo","server":false,"status":1,"code":"var cls = foam.demos.analytics.StockSnapshot;\nvar configs = [\n    'hourly',\n    'daily',\n    'weekly'\n];\n\nif ( ! x[foam.String.daoize(cls.model_.name)] ) {\n  throw 'Services not found. Run service script first!';\n}\n\nif ( ! script.clientFObjectOutput ) {\n    script.clientFObjectOutput = foam.core.Model.create({\n        package: 'candlestickdemo',\n        name: 'Output',\n        properties: configs.map(c => ({\n            class: 'foam.dao.DAOProperty',\n            name: c + cls.model_.name + 'DAO',\n            value: x[c + cls.model_.name + 'DAO']\n        })).concat(\n            {\n                class: 'foam.dao.DAOProperty',\n                name: foam.String.daoize(cls.model_.name),\n                value: x[foam.String.daoize(cls.model_.name)]\n            }\n        )\n    }).buildClass().create(null, x);\n}\nvar o = script.clientFObjectOutput;\n\nvar dayMs = 24 * 60 * 60 * 1000;\nvar testData = [\n    {\n        symbol: 'TSLA',\n        time: new Date(0),\n        price: 1000\n    },\n    {\n        symbol: 'TSLA',\n        time: new Date(dayMs * 0.25),\n        price: 3000\n    },\n    {\n        symbol: 'TSLA',\n        time: new Date(dayMs * 0.50),\n        price: 500\n    },\n    {\n        symbol: 'TSLA',\n        time: new Date(dayMs * 0.75),\n        price: 500\n    },\n    {\n        symbol: 'TSLA',\n        time: new Date(dayMs * 1.00),\n        price: 1000\n    }\n]\n\nPromise.all(\n    o.cls_.getOwnAxiomsByClass(foam.core.Property).map((a) => {\n        return o[a.name].removeAll();\n    })\n).then(function() {\n    return Promise.all(testData.map((a) => {\n        return o.stockSnapshotDAO.put(\n            foam.demos.analytics.StockSnapshot.create(a));\n    }));\n}).then(function() {\n    print('Done!');\n});","output":"Done!\n"})
